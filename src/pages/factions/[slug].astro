---
import { CollectionEntry, getCollection } from "astro:content";
import Factions from "@layouts/Factions.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedFactions from "@utils/getSortedFactions";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"faction">;
}

export async function getStaticPaths() {
  const posts = await getCollection("faction", ({ data }) => !data.draft);

  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("faction");

const sortedPosts = getSortedFactions(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Factions
      factions={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
